---
title: "Clean CPSC course data"
author: "Stephan Koenig"
date: 2024-02-09
date-format: medium
embed-resources: true
format:
  html:
    code-tools:
      source: https://github.com/stephan-koenig/clean-cpsc-course-data/blob/main/index.qmd
---

```{r}
#| label: setup
#| message: false

library(conflicted)
library(dplyr)
conflicts_prefer(dplyr::filter)
library(here)
library(janitor)
library(purrr)
library(readxl)
library(stringr)
library(tidyr)
library(writexl)

process_instructor_names <- function(
    multiple_instructors,
    last_and_first_name_combined,
    data) {
  if (multiple_instructors) {
    data <- data |> 
      separate_longer_delim(
        c(instructor_last_name, instructor_first_name, rank),
        delim = regex(";\\s*|/")
      )
  }
  
  if (last_and_first_name_combined) {
    data <- data |> 
      select(!instructor_first_name) |> 
      separate_wider_delim(
        instructor_last_name,
        names = c("instructor_last_name", "instructor_first_name"),
        delim = regex(",\\s*")
      )
  }
  
  data
}

summarize_teaching <- function(.data, ...) {
  .data  |> 
    arrange(
      instructor_last_name, instructor_first_name, session_year, session_code
    ) |>
    summarize(
      total_percentage = sum(percentage),
      total_credits_taught = sum(credits_taught),
      sections_taught = n(),
      different_courses_taught = n_distinct(
        course_department_code, course_number
      ),
      most_recent_rank = last(rank),
      .by = c(...)
    ) |> 
  arrange(...)
}

course_counts_file    <- here("data", "raw", "course_counts_raw.xlsx")
undergraduate_courses <- read_xlsx(course_counts_file, sheet = "undergrad") |>
  clean_names()
graduate_courses      <- read_xlsx(course_counts_file, sheet = "grad") |> 
  clean_names()

intro_cs_students_courses_file <- here(
  "data",
  "raw",
  "CS.103.107.110.121.210.course.data.and.student.info_20231024.xlsx"
)

within_cs_students_courses_file <- here(
  "data",
  "raw",
  "CS.programs.enrolled.students.all.courses.data_20231024.xlsx"
)

course_outcomes <-
  bind_rows(
    read_xlsx(intro_cs_students_courses_file),
    read_xlsx(within_cs_students_courses_file)
  ) |> 
  clean_names()
```

## Overview

Using the data in `course_counts_raw.xlsx`:

1)  For courses with multiple instructors (separated by "; ?"), separate into one row for each instructor and instance of a course.

2)  Standardize the names for all instructors by

    a)  Fixing the their names using consistent capitalization, middle names and spelling.

    b)  Separating first and last name if necessary (separated by "<last>, ?<first>" in the `undergrad` sheet, "<first> <last>" on `grad`).

3)  Calculate the percentage of the course an instructor was responsible for (e.g., for two instructors, it is `0.5`; for three, `0.3333`, etc.) and the adjusted credits taught.

4)  Add the number of sections and different courses taught.

## Data

### Provenance

`course_counts_raw.xlsx` provided by Alla Sheffer by email on 2024-02-01:

-   SHA256: `{r} cli::hash_file_sha256(course_counts_file)`
-   Origin unknown

Provided by Zohreh Moradi on OneDriveusing script `CS103.107.110.110.121_Oct2023.R`:

-   `CS.103.107.110.121.210.course.data.and.student.info_20231024.xlsx`\
    SHA256: `{r} cli::hash_file_sha256(intro_cs_students_courses_file)`

-   `CS.programs.enrolled.students.all.courses.data_20231024.xlsx`\
    SHA256: `{r} cli::hash_file_sha256(within_cs_students_courses_file)`

### Cleaning

```{r}
#| label: cleaning

undergraduate_courses_clean <- undergraduate_courses |> 
  rename(
    session_year = year,
    session_code = session,
    course_department_code = department,
    course_number = course,
    section_number = section
  ) |> 
  mutate(
    term = as.double(term),
    # course_number = as.numeric(str_extract(course_number, "\\d{3}")),
    multiple_instructors = str_detect(instructor_last_name, ";"),
    multiple_instructors = replace_na(multiple_instructors, FALSE),
    last_and_first_name_combined = str_detect(instructor_last_name, ","),
    last_and_first_name_combined = replace_na(
      last_and_first_name_combined,
      FALSE
    ),
    # Add missing rank information
    rank = if_else(
      instructor_last_name == "Srinivasan;Wolfman;Feeley",
      "Sessional/Instructor/Instructor",
      rank
    ),
    program = "undergraduate"
  ) |> 
  relocate(program) |> 
  nest(.by = c(multiple_instructors, last_and_first_name_combined)) |> 
  pmap(process_instructor_names) |> 
  list_rbind() |> 
  mutate(
    across(instructor_last_name:instructor_first_name, str_to_title),
    # Fix names where title case does not apply
    instructor_last_name = case_match(
      instructor_last_name,
      "Van De Panne"          ~ "van de Panne",
      "Mochetti De Magalhaes" ~ "Mochetti de Magalhaes",
      "Maclean"               ~ "MacLean",
      "Mcgrenere"             ~ "McGrenere",
      .default = instructor_last_name
    ),
    instructor_first_name = case_when(
      # Used `count(instructor_last_name, instructor_first_name)`
      # to find inconsistent first names
      instructor_last_name == "Wolfman"  ~ "Steven",
      instructor_last_name == "Knorr"    ~ "Edwin Max",
      instructor_last_name == "Shepherd" ~ "Frederick Bruce",
      .default = instructor_first_name
    )
  )

graduate_courses_clean <- graduate_courses |> 
  rename(
    session_year = year,
    session_code = session,
    course_department_code = department,
    course_number = courses,
    section_number = section,
    instructor_full_name  = instructor_last_name,
    enrolment = enrollment
  ) |> 
  select(!instructor_first_name) |> 
  mutate(
    across(c(session_year, session_code, course_department_code), str_to_upper),
    section_number = as.character(section_number),
    session_year = as.double(session_year),
    course_number = course_number |> 
      str_extract("\\d{3}.*") |> 
      str_replace("//", "/"),
    # course_number = as.numeric(str_extract(course_number, "\\d{3}")),
    # Used `count(instructor_full_name)` to find inconsistent names
    instructor_full_name = case_match(
      instructor_full_name,
      "Mark Schmidt,CLUNE, JEFFREY" ~ "Mark Schmidt;Jeffrey Clune",
      "Jeff Clune"                  ~ "Jeffrey Clune",
      "Park, Mijung"                ~ "Mi Jung Park",
      "Alex Summers"                ~ "Alexander Summers",
      "Heather O'Brian"             ~ "Heather O'Brien",
      "Heather Oâ€™Brien"             ~ "Heather O'Brien",
      "Laks Laksmanan"              ~ "Laks Lakshmanan",
      "Karon Maclean"               ~ "Karon MacLean",
      "Frank Wood"                  ~ "Frank Donald Wood",
      "Bruce Shepherd"              ~ "Frederick Bruce Shepherd",
      "Robert Xiao"                 ~ "Bo Robert Xiao",
      .default = instructor_full_name
    ),
    program = "graduate"
  ) |> 
  separate_longer_delim(instructor_full_name, delim = regex(";"))
```

Use a lookup table for names.

```{r}
#| label: lookup-names

fixed_names <- undergraduate_courses_clean |> 
  select(instructor_last_name, instructor_first_name) |> 
  distinct() |> 
  # Instructor names on `grad` sheet follow `<first> <last>` format
  mutate(
    instructor_full_name = str_c(
      instructor_first_name,
      instructor_last_name,
      sep = " "
    )
  )

fixed_names <- 
  # Instructors only in graduate courses
  graduate_courses_clean |> 
  select(instructor_full_name) |> 
  distinct() |> 
  anti_join(fixed_names, by = join_by(instructor_full_name)) |> 
  separate_wider_delim(
    instructor_full_name,
    names = c("instructor_first_name", "instructor_last_name"),
    delim = " ",
    cols_remove = FALSE) |>
  bind_rows(fixed_names)
  
graduate_courses_clean <- graduate_courses_clean |>
  inner_join(fixed_names, by = join_by(instructor_full_name)) |> 
  select(!instructor_full_name)

all_courses <- undergraduate_courses_clean |> 
  bind_rows(graduate_courses_clean) |> 
  mutate(
    session_code = factor(session_code, levels = c("W", "S")),
    rank = str_to_title(rank)
  )
```

### Add course credits

```{r}
#| label: course-credits

taught_courses <- all_courses |> 
  select(course_department_code, course_number) |> 
  mutate(separated_course_number = course_number) |> 
  separate_longer_delim(separated_course_number, delim = "/") |> 
  distinct() |> 
  arrange(course_department_code, course_number)

credits <- course_outcomes |>
  mutate(
    course_number = str_c(
      course_number,
      str_replace_na(course_detail_code, "")
    )
  ) |> 
  rename(separated_course_number = course_number) |> 
  # Limit data range otherwise some courses are listed with different credits
  filter(session_year >= 2016) |> 
  distinct(course_department_code, separated_course_number, course_credits) |> 
  inner_join(
    taught_courses, by = join_by(course_department_code, separated_course_number)
  ) |> 
  arrange(
    course_department_code,
    course_number
  ) |>
  distinct(course_department_code, course_number, course_credits) |> 
  # Manually add missing credits for new courses
  add_row(
    tibble::tribble(
      ~course_department_code, ~course_number, ~course_credits,
                       "DSCI",          "430",               3,
                       "CPSC",         "436S",               3,
                       "CPSC",         "536W",               3,
                       "CPSC",         "538S",               3
    )
  )

all_courses <- all_courses |> 
  inner_join(
    credits,
    by = join_by(course_department_code, course_number)
  ) |> 
  relocate(course_credits, .after = section_number)
```

### Calculate statistics for instructors

```{r}
#| label: statistics

all_courses <- all_courses |> 
  mutate(
    percentage = 1 / n(),
    credits_taught = percentage * course_credits,
    .by = session_year:section_number
  )

teaching_by_instructor <- all_courses |> 
  summarize_teaching(instructor_last_name, instructor_first_name)

teaching_by_instructor_and_year <- all_courses |> 
  summarize_teaching(instructor_last_name, instructor_first_name, session_year)

undergraduate_courses_clean <- all_courses |> 
  filter(program == "undergraduate") |> 
  select(!program)

graduate_courses_clean <- all_courses |> 
  filter(program == "graduate") |> 
  select(!program)
```

### Quality check

The number of undergraduate and graduate courses should be the same as the sum of percentages of courses taught by all instructors.

```{r}
#| label: quality-check

nrow(undergraduate_courses) + nrow(graduate_courses) ==
  sum(all_courses$percentage)
```

## Save data

```{r}
#| label: save-data

write_xlsx(
  list(
    combined = all_courses,
    teaching_by_instructor = teaching_by_instructor,
    teaching_by_instructor_and_year = teaching_by_instructor_and_year,
    undergrad = undergraduate_courses_clean,
    grad = graduate_courses_clean
  ),
  path = here("data", "processed", "course_counts_clean.xlsx")
)
```
